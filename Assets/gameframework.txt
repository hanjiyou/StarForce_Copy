                           C#相关总结
1.partial关键词修饰局部类，其中一个类文件继承MB,别的文件都能使用MB的生命周期方法
2.通过csc生成类库步骤
(1)搭建C#环境(csc命令)
① c:\WINDOWS\Microsoft.NET\Framework\配置path变量
(2)csc命令
①当前文件夹下 csc /target:library Person.cs;  用于生成dll
②csc Program.cs  默认用于生成exe文件
③依赖别的类库进行打包成dll:
csc -r:E:\SoftWareInstall\UnityInstall\Unity2018\Unity\Editor\Data\Managed/UnityEngine.dll -target:library MyDebug.cs;

4.获取指定程序集下指定类的所有子类
①Assembly temAssembly=Assembly.Load(assemName)
②获取指定程序集下的所有类型:Type[]= temAssembly.GetTypes();
③根据给定的type进行判断
 type.IsClass():是否是类
 typeBase.IsAssignableFrom(type):type是否继承(或间接继承)或实现类/接口
 type.IsSubClassOf(typeBase) type是否是base的子类
 type.FullName: 当前指定type的类名

5.[Conditional("MyDefine")]
(1)这个是专门为方法声明的特性
(2)根据宏是否被定义而进行调用
(3)区分大小写

7.使用Activator动态创建类类型实例
①根据指定的程序集(不需要.dll后缀)和类型字符串，ObjectHandle h=Activator.CreateInstance("UnityGameFramework.Runtime","Son1"), TargetClass=h.Unwrap() as TargetClass;
②通过该方法创建管理器对象，会执行对应的构造函数，但是不会触发断点
8.?使用规则
(1)可空类型修饰符: ?
平常定义的变量引用类型可使用空引用，而值类型通常不能表示为空，会报错。而使用?
 定义变量就使得值类型也可为空，本质是编译器编译时会把T？编译成System. Nullable的形式
(2)三元运算符: ?:
(3)空合并运算符: ??
①用于定义可空类型和引用类型的默认值。如a??b,如果a!=null，则返回a，否则返回b。
②为右结合运算符，即操作时从右向左进行组合。如a??b??c,按照a??(b??c)计算
(4)调用运算符?.
MyObj obj=new MyObj();
9.IEnumerable和IEnumerator的用法
(1)IEnumerable接口有个返回IEnumerator引用的GetEnumerator()的方法     只有实现IEnumerable接口并重写GetEnumerator()方法  只能通过重写该方法才能使用foreach去遍历
(2)一个类型是否支持foreach遍历，必须满足下面条件：
方案1：让这个类实现IEnumerable接口，并返回实现了IEnumerator接口的类的实例
方案2：这个类有一个public的GetEnumerator的实例方法，并且返回类型中有public 的bool MoveNext()实例方法和public的Current实例属性。
(3)IEnumerable是延迟加载的，每次访问(tolist())才取值
10.委托与事件
(1)Action:定义的是返回值为空的委托
(2)Function:定义一个带返回值的委托
无论委托还是事件，都得先定义委托(地位等于类) public delegate void MyDelegate(int)
(3)委托与事件的区别
①委托可根据权限进行赋值和调用，
②事件能根据权限进行注册和解绑，只能在所属类中调用
③事件如果改成属性访问器样式 event Myevent{add;remove}，则只能+=或-=，无论在哪
都不能直接执行，只能执行事件对应的私有委托
④规范化要求:事件对应的私有委托一般使用EventHandler<T>
11.Queue队列和Statck栈的区别
(1)Queue 先进先出(可以看成单向路)
①Enqueue(obj):将obj添加到队列末尾
②Obj Dequeue():从队列中删除并返回队首
③Obj Peek():获取队首对象
④Obj[]ToArray():将队列复制到新数组中
⑤TrimToSize() 将容量设为Queue中元素的实际数目
(2)Statck 后入先出(可以看成桶)
12.枚举类型加上[Flags]特性，表示该枚举支持位运算，其内元素最好按照2的n次方递增，
 ①'|'表示相加
 ②a&(~b)表示相减
 (1)做位标志进行位运算(从0开始赋值,1,2,4)
①要使枚举类型具有位运算的能力，需要添加Flags特性
②枚举进行&、|、~转成二进制进行位运算
③枚举减法只能减有对应位的，不能随意减
13.字典与List的使用和关联
(1)Dictionary的用法
①按照key的值:dir[n]=value 相当于Add(n,value)
②根据下标: dir.ElementAt(n).key/value是只读的，无法修改 想修改指定下标的值可以
dir[dir.ElementAt(n).key]
③深拷贝与浅拷贝
 深拷贝 开辟空间并拷贝原来的值，比较地址返回false
 浅拷贝 不开辟空间 只是新建一个指向原地址的引用,直接用"=="比较字典名(本质是地址)
 返回true
(2)List用法
①list[i]:i是下标
②ElementAt(i) 也是下标
(3)Linq排序
按照value的level属性进行降序排列并再返回一个字典
 dict=dict.OrderByDescending(item => item.Value.level).ToDictionary(p => p.Key, o => o.Value);

15.特性
(1)基础 定义:给指定的某一声明的一则附加的声明性信息对程序中的元素进行标注，如类型、字段、
方法、属性等。.net角度看特性是一种类，这些类继承于System.Attribute类，主要用在反射中；从面向对象级别看，是类型级别的。
 作用:①运行时描述代码，或者影响程序的行为
②处理序列化、程序安全特性等
(2)1)自带特性
注:特性类在编译的时候实例化，而不是通常那样运行时实例化
①Conditional:条件编译，满足条件才允许编译器对代码进行编译，一般用于程序调试
②DllImport:标记非.net函数，即在外部DLL中定义
③Obsolete:标记当前方法被废弃

16.@运算符用法
(1)忽略转移字符 str=@"D:\文本"
(2)让字符串跨行
(3)C#不允许关键字作为标识符，但加上@后可以

17.接口中可以包含方法和属性(普通属性访问器或者事件)，不可以包含字段
18.MemorySteam详解
(1)Flush()函数
使用流写文件时，数据流会先进入到缓冲区中，而不会立刻写入文件，当执行这个方法后，缓冲区
的数据流会立即注入基础流，此方法确保首先将数据刷新至基础流然后再将其写入文件
(2)Length:表示流中实际数据的长度(也可能是通过SetLength()设置数据长度方法修改)
(3)Position:流中当前索引的位置，受很多因素影响：读写会等于实际数据的最新位置；
也可以Seek()直接设定强制改变当前索引；SetLength()如果长度小于当前数据的实际长度也会改变，
且此时会有dirty_bytes，大于不会改变
(3.1)SetLength():修改流中实际数据的长度
①SetLength()不能超过Capacity否则报错
①SetLength()如果长度小于当前数据的实际长度会改变position，且此时会有dirty_bytes，
大于不会修改position，只会修改Length
(4)Capacity:当前缓冲区大小，只能通过构造函数或者Capacity属性赋值
(5)GetBuffer():返回当前内存流整个缓冲区的数据，包括那些分配了但是并没有用到的字节数据
(5)Close()关闭流并释放资源

19.this的4种用法
(1)当前类的实例
(2)串联构造函数 public A():this(name) 先执行A(name) 后执行A()
(3)为指定的原始类型扩展方法
(4)索引器:通过索引值获取数据
一般格式:T this[int/string]{get{return ..}}

20.lambda表达式捕获外部变量
(1)for循环遍历数组 无法在lambda直接使用循环变量(值为最大值+1(比如数组长度+1) 超出范围)
解决办法 ①用个外部临时变量过度一下 如:int index=i(i是循环变量)
②用foreach lambda表达式可以直接使用循环变量

21.内存管理
(1)两种资源:托管资源和非托管资源(https://www.cnblogs.com/cjm123/p/8391823.html)
①托管资源:该资源的回收人工无法干预，大多数对象都是托管资源，即可以依靠.NetFramework的垃圾回收器隐式地执行所有必要的内存管理任务
②非托管资源:包括Stream流、数据库的连接、GDI+、Com对象等资源，需要我们手动
去释放，否则会占用系统的内存和资源，可能出错。常见的有:FS,Stream,Socket,Write,Timer,Context等
(2).Net提供Object.Finalize()允许垃圾回收器回收该对象时适当清理其非托管资源，实现Finalize()方法会对性能有影响，即需要两次垃圾回收 一次回收含终结器的 一次回收不含的
(3)Windows的内存管理(虚拟寻址系统)
①堆栈/栈:存放值类型，后入先出，性能高，不灵活，数据一般小
②托管堆/堆:Customer customer=new Customer() 在堆上分配一个内存，存放Customer实例，然后把该内存的地址设置为变量customer的值，customer分配在栈中
(4)非托管对象的特殊处理
对于不受垃圾回收期控制的指定专门的规则，使用两种机制自动释放该资源
①声明析构函数(自动生成Finalize()):垃圾回收器删除对象时调用，受垃圾回收器运行规则决定，不能在析构中放需要在某时刻运行的代码，如果对象占用宝贵资源，应该尽快释放而不是等待回收器
②实现IDisposable接口(替代析构函数):为释放非托管资源提供了确定的机制，同时避免了产生析构函数与垃圾回收器可能造成的问题。调用Dispose()时可能出异常，一般方法用try{}finally{}捕获异常并确保关闭，为了防止重复这样的结构，C#提供了using(){}代码块确保引用在超出作用域时即使有异常，对象也会自动调用Dispose()(不是Close())
(5)Object.Finalize(终结器)
默认不执行任何操作，用于释放非托管资源。如果想让垃圾回收器回收对象的内存之前对对象执行清理操作，必须重写该方法。有两种重写方法
①析构函数 ②对基类的Finalize的调用。
注意:不建议使用该方法，因为回收对象内存时至少需要两次垃圾回收，只回收没终结器的
(6)SuppressFinalize()方法则告诉垃圾收集器有一个类不再需要调用其析构函数了，就意味着垃圾收集器认为这个对象根本没有析构函数。一般该方法在IDisposable.Dispose()中调用。

22.AppDomain讲解
(1)与CLR的关系:AppDomain是CLR的运行单元，CLR被CLRHOST加载后 会创建默认的AppDomain且程序的入口点Main()就是在这个默认的AppDomain中执行
(2)与进程的关系:AppDomain被创建在进程中，一个进程可多个AD,一个AD只
能一个进程
(3)vs线程:AppDomain是静态概念，只限定了对象的边界；线程是动态概念，可运行在不同的AD,一个AD可创建多个线程，但不能限定线程只在本AD中执行。该线程其实是ST，不能被操作系统识别，操作系统识别的是HT，当ht访问到某个AD时，AD就会为之产生一个ST，ht有thread local storage(TLS)，这个存储区被CLR用来存储这个ht当前对应的AD引用以及st引用，ht穿越到另一个AD时，TLS中的这些引用也会变。
(4)vs Assembly:Assembly是.Net的基本部署单元，为CLR提供元数据，不能单独执行，必须得被加载到AppDomain中，然后由AppDomain创建程序集中的对象，一个程序集可被多个AD加载，一个AD可加载多个程序集。每个AppDomain引用到某个类型的时候需要把相应的assembly在各自的AppDomain中初始化。因此，每个AppDomain会单独保持一个类的静态变量。



                              unity相关总结:
1.EventSystem
 UGUI的EventSystem中，有很多事件接口，其中最常用的是IPointerClickHandler,
 IPointerDownHandler,IPointerUpHandler，其中Up重写的方法必须同时又Click时，才会执行且先执行；Down重写的方法可自己直接执行
(1)防止点击穿透，即如果点击UI则不会触发模型的点击事件:if(EventSystem.current.IsPointerOverGameObject()){return;}
 IsPointerOverGameObject() 判断点击是否在UI对象上，是则返回true
①无参时判断对象为鼠标左键(pointerId=-1)
②有参时判断对象为手指Touch点击 参数应该为:Input.GetTouch(0).fingerId

2.发射射线的3种方式
(1)一般用于与3D场景 模型进行点击操作时使用(有碰撞器的时候才会触发命中)
Ray r=camera.ScreenPointToRay(Input.mousePosition)
RaycastHit rh,
if(Physics.Raycast(ray, out raycastHit)){ rh.transform}
(2)用于检测命中的UI部分，无法获取到带碰撞体的模型
①使用PointerEventData 初始化点击位置 ped.position=Input.mousePosition
②EventSystem.current.RaycastAll(ped,results)
(3)使用PointerEventData和canvas.GetComponent<GraphicRaycaster>().Raycast(ped,result)，功能同2

3.Editor总结
(1)普通的Editor直接使用[MenuItem]特性指定静态方法，会在菜单栏生成自定义的选项
(2)控制Inspector监视面板的Editor:
 1)步骤:
 ①Editor类引用特性[CustomEditor(typeof(TargetClass))]
 ②OnEnable() 目标类显示在监视面板上回马上执行一次
 ③OnInspectorGUI() 监视面板刚显示或者发生交互时会调用
 ④SerializedProperty 重新定义所有想要显示在监视面板的MB中的属性
 2)各种单独的组件(EditorGUILayout):
 ①浮点型的滑动条:EditorGUILayout.Slider(sp,leftNum,rightNum)
 ②加黑的标签: EditogGUILayout.LabelField(labelText,EditorStyles.boldLabel)
 ③带标签的输入框: EditorGUILayout.TextField(label,inputStringField)
 ④下拉框 : newIndex=EditorGUILayout.Popup("列表标签",selectIndex,string[])
 ⑤复选框:  newSelectStatus=Toggle/ToggleLeft(label,isSelected)
 ⑥分割: EditorGUILayout.Separator()
 ⑦根据序列化属性来自动生成对应不同类型的组件:EditorGUILayout.PropertyField(sp)
 3)布局组件:
 ①开启一个矩形垂直的布局组件:
 EditorGUILayout.BeginVertical("box"){布局组件的具体内容} EGL.EndVertical()
 ②根据输入条件控制是否能操作:如果正在运行 组件就不可操作
 EditorGUI.BeginDisabledGroup(EditorApplication.isPalying){} EG.End();
 ③设置滑动区域 EGL.BeginScrollView(){}  end
 4)序列化字段SP的使用
 ①在MB中对应字段如果是私有的，需要加上[SerializeField]特性
 ②序列化属性在Editor中通过serializedObject.FindProperty()对象获取
 ③如果是数组，则可以:sOP.arrySize获取长度、ClearArray()清空数组、InsertArrayElementAtIndex(i)插入格子、GetArrayElementAtIndex(i).stringValue为格子的string赋值

4.unity项目中的dll
①我们自己定义的普通cs文件会被打入Assembly-CSharp.dll中
②放在Plugins下的cs文件会被打入Assembly-CSharp-firstpass.dll中
(3.1)unity编译顺序如下①Plugins ②Plugins/Editor ③其他不在Plugins ④其他Editor
5.WWW与UnityWebRequest(两者都是用于http请求)
如果都是用协程等待下面两种方法的下载
(1)WWW属于老方法，没有timeout字段，无法设置超时时间，协程会一直等待
(2)UnityWebRequest(https://blog.csdn.net/qwe25878/article/details/85051911):
①unity5.4版本出的用于替换WWW，可设置timeout，如果超时会返回，且IsNetworkError为true
②判断错误不应用webRequest.erro!=null,这是错误的；应该用.isHttpError||.isNetworkError来判断是否出错
③SendWebRequest()开始与远程服务器通信，返回WebRequestAsyncOperation对象，协程内产生该对象将导致协程暂停，知道UnityWebRequest遇到错误或完成通信。
④Abort() 尽快结束联网过程，可以随时调用此方法,UnityWebRequests被认为遇
到了系统错误。 isNetworkError或isHttpError属性将返回true，error属性将为“User Aborted”
⑤EscapeURL()些文本字符在URL中存在时具有特殊含义。 如果需要在URL参数中包含这些字符，则必须使用转义序列表示它们。
6.UNITY_ANDROID宏定义运行情况包含两种①android端 ②unity切换到android平台

                                 二.框架模块详解
1.Component详解(都属于MB的子类，能使用MB的生命周期方法)
(1)GameFrameworkComponent,一切Component的基类，继承了MB,Awake()方法中将自身注册到GameEntry中
①是所有模块的组件Component的基类，其基类是GameFrameworkComponent(继承了MB，awake()中会调用GameEntry.RegisterComponent()把自身注册到LinkedList
<GameFrameworkComponent>集合中)我们也可以通过GameEntry
来获取每个模块对应的Component
(2)BaseComponent(轮询的开端 mb的update在此处)
Awake()方法中初始化各种Helper
Update()方法，循环调用GameFrameworkEntry.Update()方法
(3)每个模块的Component
①Awake()中注册自身的Component，然后获取当前模块的Manager接口
②Start()
  1)流程组件:获取所有选中的序列化的流程名，从Appdomain中根据流程名获取对应Type，
动态创建实例，然后Manager.Initialize()和Manager.StartProcedure()方法
(4)模块Component管理类:GameEntry
用于注册和获取所有模块的Component组件，里面有注册和获取指定type的component的方法


2.Manager详解(Manager脱离了u3d,不属于MB的子类)
(1)管理器基类 抽象类GameFrameModule(GFM)
①所有模块的管理器Manager的基类 有Update()和Shutdown抽象方法
②里面含有internal权限的Priority(优先级)
(2)管理器管理类 静态类GameFrameworkEntry使用链表LinkedList<GFM>存储所有管理器实现的接口(注意是接口，这样更加多态化)
 ①有获取游戏框架模块的静态方法GetModule<T>()，先遍历链表中是否已经添加，没有则创建并根据优先级添加到链表中，有则直接返回
(3)Manager不是通过构造函数创建的，而是通过(2)GFE创建并统一管理的
3.Procedure流程详解(状态FsmState的子类)
(1)流程基类 ProcedureBase,PB的基类是FsmState<IProcedureManager>，即状态机的
状态基类，T是状态机持有者且该状态的
(2)
每个自定义的流程都需要继承ProcedureBase类
4.FSM状态机详解
(1)状态机管理器 FSMManager
①在ProcedureComponent.Start()中，调用PM.Initalize(IFsmMan,ProcedureBase)方法，
该方法调用FsmManager.CreateFSM<T>来创建并返回一个FSM状态机，该状态机所有者是IPM
，内部状态是
(2)FSM状态机类
①构造函数
通过创建一个状态机时:FSM(name,T owner,FsmState[])，会把形参状态数组
添加到m_States状态字典中，然后调用每个状态的OnInit()方法
②

5.分析从流程到FSM中Update的调用流程
(1)自定义Procedure->流程基类ProcedureBase(5种生命周期方法OnInit,OnEnter,OnUpdate
,OnLeave,OnDestory)->有限状态机状态基类FsmState<IProcedureManager>(5中生
命周期以及ChangeState方法)
(2)ProcedureBase5种生命周期方法调用时机
①OnInit()
FsmManage.CreateFSM()->Fsm()构造函数中，调用当前状态机所有状态的OnInit
方法
②OnEnter()
    初始流程会在ProcedureComponent.Start()调用->PM.StartProcedure()调用
->Fsm的Start()调用->state.OnEnter()
    切换流程的OnEnter()会在FsmState.ChangeState()//普通保护类型方法中被调用
调用->Fsm.ChangeState()老流程调用OnLeave，新流程调用->OnEnter();
③Update()
PB->Fsm->FsmManager->管理器管理类GameFrameworkEntry.Update
->BaseComponent.Update()
④OnLeave()
(3)调用ChangeState()切换流程的执行过程
自定义Procedure 执行ChangeState()->FsmState的ChangeState<目标状态>(当前状态机)
->通过当前fsm调用Fsm.ChangeState<目标状态>->老状态OnLeave,新流程OnEnter
1.Event事件机制
(1)事件参数与事件手柄
①EventArgs(包含事件数据的类的基类)的封装和使用
抽象类GameEventArgs(u3d直接使用的args类一般都继承自此处)->BaseEventArgs(抽象id+IReference引用接口的Clear())->GameFrameworkEventArgs(gf.dll内的源码大部分事件继承
该抽象类)->系统类EventArgs
②事件手柄(委托)
EventHandler<T>(obj,T),该手柄对应的方法是:void Method(object sender,TEventArgs)
(2)订阅事件的流程
EventComponent.Subscribe调用->EventManager.Subscribe调用->EventPool.dic.Add()
注意：添加时，如果不存在当前key，就直接添加k和v；如果存在，则直接
eventHandler+=handler
(3)触发订阅事件的流程



                              ugf的总结第二次
1. EventManager相关讲解
(1) 成员变量
 事件池私有字段m_EventPool<GameEventArgs> 获取事件数量EventCount
 获取事件手柄数量EventHandlerCount Update()轮询 Check()检查是否存在事件 Subscribe()订阅事件
 Fire()抛出事件 FireNow()立即抛出事件
注意:上面的成员执行本质都是通过m_EventPool 比如轮询是调用m_EventPool.Update Fire是调用m.f
Subscribe()是调用m.s
1.2EventPool<T> T:BaseEventArgs
(1) 成员变量
①Dictionary<int,LinkedList<EventHandler<T>>> m_EventHandler 手柄字典 key是事件id(T.Id)
value是手柄单链表 根据不同事件池权限 会有不同的情况
②Queue<EventPool<T>.Event> m_Events 存储所有的事件队列
③EventPoolMode m_EventPoolMode(枚举)事件池的权限
④m_DefaultHandler 默认的事件手柄
(2) 成员方法
①Update轮询 每次轮询不断判断事件队列元素个数 >0就不断的移除队首元素并通过HandleEvent()
执行队首元素事件
②Subscribe(id,handler) 订阅事件处理函数,如果不存在id则直接添加，否则根据权限判断是添加还是
抛出异常
③Fire()抛出事件 该方法只是将事件添加到队列中  执行是在轮询中不断从队列取出队首
调用Handleevent执行
④FireNow()立即抛出事件 直接调用HandleEvent
⑤HandleEvent(object,T)处理事件节点
如果存在id 则执行该id对应的单链表存储的所有事件；如果不存在执行默认事件；如果权限不允许存在
无手柄的情况则抛出异常；否则释放参数的引用

2. ObjectPoolManager

3. ReferencePool引用池(RP是ReferencePool简称 ReferenceCollection引用集合)
注意:引用池中的引用类型必须实现IReference接口
(1)成员
①IDictionary<string,RP.RC> key是引用类型type的fullName value是自定义的引用集合
②GetAllReferencePoolInfos()获取所有引用池
③ClearAll()清除所有引用池
④Acquire 从引用池获取类型 会调用私有方法GetRC(fullName) 即根据fullName去字典中获取，
不存在则新建引用并且添加到字典中，存在则直接返回。
⑤Add<T> 向指定类型的引用追加一定数量
3.1ReferenceCollection自定义引用集合
(1)成员
①Queue<IReference>引用队列
②正在引用的数量 获取引用的数量 释放引用的数量 添加/移除引用的数量
③Acquire() 从队列获取引用 如果队列数量>0则出列；否则通过Activator创建并返回

4.Network
(1)NetworkManager(继承GFM抽象类 实现了INetworkManager接口)网络管理类
 (1 成员:
①m_NetworkChannels<string,NetworkChannel> Key对应频道的name value是频道对象 用于存储所有的频道
②EventHanlder委托类型的连接、关闭、丢失心跳、错误、自定义错误5中实现自接口的event事件 这些事件
赋值是在NetworkComponent的Awake中 运行是在频道的5个对应回调绑定的方法内运行 (回调)
③创建频道、获取频道、判断频道是否存在、获取当前所有频道、销毁频道
④步骤②中的5个event事件对应的回调方法，创建频道时添加到频道中对应的GameFrameworkAction委托
 销毁频道时解绑
(2)NetworkManager.NetworkChannel网络频道类(实现了INetworkChannel、IDisposable接口)
 (1 成员:
①变量:默认心跳时间间隔(30s) 频道名 发送包池(Queue) 接收包池(EventPool) 频道帮助类实际心跳间隔
网络类型(UnKnow) 频道socket套接字 三种自定义状态(SendState、ReceiveState、HeartBeatState)
5个自定义Action(连接、关闭、丢失心跳、错误、自定义错误)
 (2 流程:
 Connect:
①构造函数初始化上面的成员变量
②Connect(ip,port,object)方法 创建socket赋值给m_Socket 并重置发送状态、接收状态为包头准备，
最终m_Socket.BeginConnect(ip,port,new AsyncCallback(ConnectCallBack),ConnectState)
开始异步链接，异步回调是ConnectCallBack，object是ConnectState
③在连接异步回调ConnnectCallBack(IAsyncResult ar),首先关闭连接ar.AsyncState.Socket
.EndConnect(ar) 接收和发送数量置为0 重置心跳状态 并调用当前频道的NetworkChannelConnected
委托
④调用Receive()

 Receive:(r.s意思是recState.Stream)
①m_Socket.BeginReceive(r.s.GetBuffer(),r.s.pos,r.s.l-r.s.pos,SocketFlag.None,
new AsyncCallback(ReceiveCallback),m_Socket)
②接收回调ReceiveCallback(IAsyncResult)中 关闭接收ar.AyyncState.EndReceive(ar)会返回本次
接收的数据长度num，捕获异常有异常则停止执行，没有异常则对r.s.p累加num。如果接收流的当前
位置小于流的容量 调用Receive()，否则接收包数量++，接收流位置归0。如果接收状态的包头接口
为空(初次)则处理包头(ProcessPacketHeader())，否则处理包体(ProcessPacket())
③ProcessPacketHeader() 使用频道辅助类反序列化接收流中的包头以及自定义错误数据，如果有错
则停止，否则接收流预备处理包体(r.PrepareForPacket(packetHeader))
 整体流程:首先Connect的时候调用 PrepareForPacketHeader()初始化包头即包体长度
①socket异步接收 ②接收回调 如果rs的包头接口为空(初次)则调用 ProcessPacketHeader()会反
序列化接受流得到包头接口然后赋值给rs ③再次接受->回调->包头不为空则 ProcessPacket()

注意:socket的所有异步操作beginXXX(IAsyncResult ar)，ar是回调传递来的结果
(3)ugf层以及gf层的NetworkConnect事件委托初始化以及运行的整体流程
 ①INetworkManager中定义event事件NetworkConnected 被Network通过实现接口所继承 并设为了属性访问器NetworkConnected 该访问器访问的私有字段是m_NetworkConnectedEventHandler
 ②步骤①中的委托真正执行是在OnNetworkChannelConnected()中，如果不为空则锁定执行
 ③OnNetworkChannelConnected中的方法被绑定给了网络频道的框架委托NetworkChannelConnected
 ④而网络频道类的NetworkChannelConnected是在连接回调中执行
整体流程
 连接回调->执行网络频道委托NetworkChannelConnected->执行频道委托绑定的NetworkManager中的
 OnNetworkChannelConnected方法，在该方法中 判断NM中的事件是否为空 不为空则执行事件访问器
 对应的字段->执行事件在NetworkComponent中绑定的最终回调OnNetworkConnected

5.Task任务
5.1Task文件夹
(1)TaskBase:IReference 任务抽象基类 实现了引用接口
 字段或属性:任务序列编号、任务优先级
 方法:
 ①OnGenerate()切换状态为Waiting
 ②OnStart()切换状态为Running
 ③OnUpdate
 ④OnComplete 切换状态为Completed
 ⑤OnFailure ⑥OnCancel
 ⑦Clear() 恢复字段为初始状态 任务状态切换为Free
(2)TaskStatus 任务枚举类型
(3)ConditionalTask 条件任务
 字段或属性:条件断言、完成事件、失败事件、撤销事件
(4)TaskManager 任务管理器
 字段:单链表(存储所有的任务)、m_Serial(为每个任务分配的序列号)
 属性:任务数量
 方法:
 ①Update()遍历单链表 判断每个任务的状态 是Waiting则执行OnStart 若是Running则调用OnUpdate 若是Free则抛异常 否则移除当前节点获取下一个节点
 ②Shutdown()关闭并清理任务管理器
 ③CancelAllTasks() 遍历单链表 所有的Waiting/Running状态的任务都执行OnCancel
 ④GenerateTask<T>()生成任务 任务编号根据m_Serial累加赋值 然后按照优先级添加到单链表中
 5.2Base/TaskPool文件夹
 (1)ITask任务接口
 属性:SerialId序列编号、Priority任务优先级、Done任务是否完成
 (2)ITaskAgent<T> where T:ITask 任务代理接口
属性:获取T(任务)类型
方法: Initialize()初始化任务代理、Update()任务代理轮询、
Shutdown()关闭并清理任务代理、Start()开始处理任务、
Reset()停止正处理的任务并重置代理
 (3)TaskPool 任务池
 1)字段以及属性:m_FreeAgents空闲的代理(栈)、m_WorkingAgents工作中的代理(单链表)、m_WaitingTasks等待中的代理单链表)
 2)方法:
①Update():遍历工作中的代理单链表 如果完成则该代理并从单链表中移除放入空闲代理栈
中。如果空闲栈和工作链数量都大于0，将空闲栈的代理剪切到工作链中，等待链移除链首
元素判断状态是否完成
②Shutdown():关闭并清理任务池
③AddAgent() 增加任务代理 调用代理的初始化 并放入空闲代理栈中
④AddTask() 增加任务 按照任务的优先级添加到等待任务单链表中
⑤RemoveTask() 移除任务 如果等待任务单链表中有该任务的序列编号 则从中移除；否则遍历工作中的代理 看代理执行的任务编号是否符合 符合则重置代理 并将该代理从工作中单链表剪切到空闲栈
⑥RemoveAllTasks() 移除所有任务

6.Download下载
(1)DownloadManager.DownloadCounter
字段及属性 m_DownloadCounterNodes下载计数器节点队列<DownloadCounterNode>、m_UpdateInterval更新间隔、m_RecordInterval记录间隔、m_CurrentSpeed当前速度、m_Accmulator累加器/计时器、m_TimeLeft剩余时间方法
方法①Update():轮询下载计数器节点，调用每个节点的Update()。移除时间超过记录间隔的队首元素，如果队列为空则重置并return。
如果剩余时间小于0，遍历下载计数器节点获取总下载长度，计算当前速度为总长度/计时器
②Reset() 重置动态数据如当前速度、剩余时间、计时器
③RecordDownloadedLength() 创建已下载计数器节点类对象保存到队列中
内部类 DownloadCounterNode(downloadedLength) 已下载计数器节点类
①包含已下载长度（构造函数参数）和流逝时间（构造函数默认为0）两个字段以及属性
②Update()方法累加流逝时间
(2)DownloadAgent:ITaskAgent,IDisposable  下载代理类
1)字段 m_Helper下载代理辅助器、m_Task下载任务、m_FileStream文件流、m_WaitFlushSize等待刷新大小、m_WaitTime等待时间、开始的长度、已下载长度、已保存长度、m_Disposed、四种Action:DownloadAgent开始、更新、成功、失败
2)方法
①Initialize()初始化下载代理 来自接口ITaskAgent 即为代理辅助器接口的3种事件更新、完成、错误事件绑定回调
②Update()轮询 如果当前下载任务的状态是Doing 则累加等待时间 如果超时则执行下载代理辅助器错误回调
③Shutdown()关闭并清理下载代理 解绑辅助器的3种回调
④Start()开始处理下载任务:
切换状态为Doing。判断下载路径是否已存在是则fs=File.OpenWrite(path)返回文件流，并设置该流对象pos为终点，开始大小=保存大小=文件流长度，已下载大小为0；否则先判断下载路径的文件夹是否存在，不存在则创建，然后fs=new FileStream(path,FileMode.Create,FileAccess.Write)，开始大小、已保存大小、已下载大小=0，如果下载代理Start的Action不为空则执行，调用辅助器方法
⑤Reset()重置下载代理 即重置所有的动态数据
⑥Dispose()释放资源 调用GC.SuppressFinalize()使垃圾回收期不调用对象的终结器
⑦SaveBytes(bytes) 将bytes字节数组传递的数组写入fs流，并将数组长度算入等待刷新区大小和已保存长度中，如果等待刷新区大小>=下载任务的将缓冲区写入磁盘的临界大小，则刷新fs 并重置等待刷新区大小
⑧OnDownloadAgentHelperUpdate()/OnDownloadAgentHelperComplete/OnDownloadAgentHelperError是绑定给下载辅助器3种事件:更新、完成、错误的回调，其内执行都含判断代理的相应Action是否为空，不为空则执行
(3)DownloadTask:ITask 下载任务
1)字段:序列编号、优先级、是否完成、下载任务的状态(枚举)、下载路径、下载uri、刷新区大小、超时时长、用户数据
无方法
(4)DownloadManager
1)字段:任务池TaskPool<Download>、下载计数器DownloadCounter、刷新区大小、超时时长、Priority(80)、4种event:下载开始、更新、成功、失败。
2)方法①Update()调用任务池的轮询和下载计数器的轮询
②Shutdown() 调用任务池和计数器的Shutdown()
③AddDownloadAgentHelper() 添加下载代理辅助器
一个代理对应一个辅助器 DownloadAgent(helper) 并为该代理的4种Action初始化赋值(不赋值会为空) 将该代理(本质是任务代理)添加到任务池中的空闲代理栈中
④AddDownload() 添加下载任务
创建一个DownloadTask对象 taskPool.AddTask(task) 按照优先级添加到任务池的等待中任务单链表中
⑤RemoveDownload()移除下载任务 调用任务池的移除任务

7.Resource详解
7.1 各种回调
(1)CheckResourcesCompleteCallback:使用可更新模式并检查资源完成的回调函数。
(2)DecryptResourceCallback:解密资源回调函数。
(3)InitResourceCompleteCallback:使用单击模式并初始化资源完成的回调函数
(4)LoadAssetCallbacks:加载资产回调集
  ①LoadAssetSuccessCallback:加载资产成功回调
  ②LoadAssetFailureCallback:加载资产失败回调
  ③LoadAssetUpdateCallback:加载资产更新回调
  ④LoadAssetDependencyAssetCallback:加载资产时加载依赖的回调
(5)LoadBytesCallback:读取数据流回调函数
(6)LoadSceneCallbacks:加载场景回调函数集
  ①LoadSceneSuccessCallback:加载场景成功回调
  ②LoadSceneFailureCallback:加载场景失败回调
  ③LoadSceneUpdateCallback:加载场景更新回调
  ④LoadSceneDependencyAssetCallback:加载场景时加载依赖资源回调函数
(7)UnloadSceneCallbacks:卸载场景回调函数集
  ①UnloadSceneSuccessCallback:卸载场景成功回调
  ②UnloadSceneFailureCallback:卸载场景失败回调
(8)UpdateResourceCompleteCallback:使用可更新模式并更新资源全部完成的回调
(9)UpdateVersionListCallbacks:版本资源列表更新回调函数集
  ①UpdateVersionListSuccessCallback:版本资源列表更新成功回调函数
  ②UpdateVersionListFailureCallback:版本资源列表更新失败回调函数
7.2 各种事件
(1)LoadResourceAgentHelper Error/LoadComplete/ParseBytesComplete/ReadBytesComplete/ReadFile/Update EventArgs 加载资源代理辅助器错误/异步加载资源完成/解析流完成/读取资源二进制流/读取文件转换为加载对象/更新
(2)ResourceUpdate Changed/Failure/Start/Success EventArgs 资源更新 改变/失败/开始/成功事件
7.3 其他常量以及枚举等
(1)CheckVersionListResult(enum):检查版本资源列表结果
(2)Constant:资源相关常量
字段:默认资源加载优先级
(3)ResourceMode(enum):资源模式
7.4 辅助器
(1)ILoadResourceAgentHelper:加载资源代理辅助器接口
(2)IResourceHelper:资源辅助器接口
7.5 ResourceManager类的嵌套类
(1)结构体AssetDependencyInfo
 字段:string资源名、依赖资源名数组、依赖零散资源名数组
(2)结构体AssetInfo
 字段:string资源名、ResourceName资源名、子资源信息
(3)ResourceManager资源管理器本身
(4)LoadType(enum):资源加载方式:从文件/内存中加载、快速解密加载、解密加载
(5)结构体ReadWriteResourceInfo:读写资源信息
字段:LoadType加载类型、长度、哈希码
(6)ResourceChecker:资源检查器
 RM资源管理器对象、Dict<ResourceName,CheckInfo>、当前变体、
 版本列表读取就绪、只读列表就绪、读写列表就绪、资源需要更新Action、资源检查完成Action
 (6.1)CheckInfo:资源检查信息
字段:ResourceName资源名、CheckStatus资源检查状态、是否需要从读写区移除、
远程信息、本地信息-只读信息、本地信息-可读写信息
方法:①SetVersionInfo() 设置资源在版本中的信息
   ②SetReadOnlyInfo() 设置资源在只读区中的信息
   ③SetReadWriteInfo() 设置资源在读写区中的信息
   ④RefreshStatus() 刷新资源信息状态
  (6.1.1)CheckStatus(enum):资源检查状态
  (6.1.2)结构体LocalVersionInfo:本地资源状态信息
  字段:是否存在bool、加载类型LoadType、长度、哈希
  (6.1.3)结构体RemoteVersionInfo:远程资源状态信息
(7)ResourceGroup:资源组
字段:Dic<ResourceName,ResourceInfo>资源信息字典(已准备的资源)、List<ResourceName>资源名称列表(要准备的资源)
属性:ResourceCount:资源名称列表的长度
 ReadyResourceCount:资源组已准备完成的资源数量:m_ResourceInfos中包括则准备完成
 TotalReadyLength:资源组已准备完成总大小
 Progress: 获取资源组准备进度。
方法:AddResource():向资源组中增加资源
(8)ResourceInfo:资源信息
资源名称ResourceName、加载类型(LoadType)、大小、哈希值、是否存储在只读区
(9)ResourceIniter:资源初始化器
资源管理器对象、
(10)ResourceLoader:加载资源器
 (10.1)AssetObject:资源对象
 (10.2)LoadResourceTaskBase:ITask :加载资源任务抽象基类
 (10.3)LoadAssetTask:加载资源任务
 (10.4)LoadDependencyAssetTask:加载依赖资源任务
 (10.5)LoadResourceAgent:加载资源代理
  (10.5.1)WaitingType:等待类型
 (10.6)LoadSceneTask:加载场景任务
 (10.7)ResourceObject:资源对象
(11)ResourceName:资源名称
(12)ResourceNameComparer:资源名称比较器
(13)ResourceUpdater:资源更新器
 (13.1)UpdateInfo:更新信息
(14)VersionListProcessor:版本资源列表处理器
